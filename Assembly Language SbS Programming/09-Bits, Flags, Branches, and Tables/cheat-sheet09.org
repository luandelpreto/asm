* Capítulo 9 - Bits, Flags, Branches, and Tables

** Bits Is Bits (and Bytes is Bits)
   Existe uma família de instruções no conjunto de instruções x86 que permite que você manipule bits dentro de bytes aplicando operações lógicas Booleanas
   entre bytes bit-a-bit. Essas são as instruções lógicas /bitwise/: =AND=, =OR=, =XOR=, e =NOT=. Outra família de instruções permite que você movimente bits
   dentro de um único byte ou palavra. Essas são as instruções de shift/rotate mais usadas: =ROL=, =ROR=, =RCL=, =RCR=, =SHL=, e =SHR=.

*** The AND instruction
    A instrução =AND= executa a operação lógica AND em dois operandos de mesmo tamanho e substitui o operando destino com o resultado da operação.

    =and al,bl=

*** The OR instruction
    A instrução =OR= executa a operação lógica OR em dois operandos de mesmo tamanho e substitui o operando destino com o resultado da operação.

    =or al,bl=

*** The XOR instruction
    A instrução =XOR= executa a operação lógica XOR em dois operandos de mesmo tamanho e substitui o operando destino pelo resultado da operação.

    =xor eax,eax        ; clear eax register=

*** The NOT instruction
    A instrução =NOT= executa a operação lógica NOT em um operando e o substitui pelo resultado da inversão de bits.

    =not ax=

*** Segment Registers Don't Respond to Logic!
    Mesmo quando você começar a trabalhar ao nível do sistema operacional, onde você pode ter algum acesso aos registradores de segmento na arquitetura x86 em
    /protected-mode flat model/, os registradores de segmento possuem limitações significativas. Uma dessas limitações é que eles não podem ser usados com nenhuma
    das instruções lógicas /bitwise/. Se você precisar realizar uma operação dessas em um registrador de segmento, é necessário copiar seu valor para um registrador
    de propósito geral, realizar a operação, e copiá-lo de volta para o registrador de segmento.

** Shifting Bits
   Todas as instruções de shift possuem a mesma forma geral:

   =shl <register/memory>,<count>=

   O primeiro operando é o alvo da operação de shift, ele pode ser dados de registrador ou de memória, mas não dados imediatos. O segundo operando especifica o número
   de bits pelo qual fazer o shift.

*** Bumping Bits into the Carry Flag
    Considere o valor =0xB76F= armazenado no registrador =AX=:

    =1011011101101111=

    e executamos a instrução =shl ax,1=, teremos então o resultado:

    =0110111011011110=

    Um bit 0 é adicionado na extremidade oposta do shitf (direita, nesse caso). Além disso, o bit 1 que foi empurrado para fora da string binária ao fazermos a operação
    de shift é colocado em um local temporário para bits chamado de /Carry flag/, abreviado CF. Quando uma outra instrução que faz uso da CF é executada, esse bit será perdido.

** The Rotate Instructions
   As instruções de rotação são quase idênticas às instruções de shift, mas com uma diferença crucial: um bit empurrado para fora do operando reaparece na extremidade oposta
   do operando.

   Considere o registrador =AL= com o valor inicial =0xB2=

   =10110010=

   Ao executarmos a instrução =rol al,1= (rotate left), teremos o valor:

   =01100101=

   O número de bits pelo qual um operando é rotacionado pode ser um valor imediato ou um valor em =CL=.

   Existe um outro par de instruções de rotação no conjunto de instruções x86: =RCR= (Rotate Carry Right) e =RCL= (Rotate Carry Left). Eles operam como =ROR= e =ROL=, mas com uma
   diferença: os bits que são empurrados para fora do operando e voltam para o operando na outra extremidade fazem esse percurso passando pela /Carry flag/. Portanto, esse caminho
   se torna um bit mais longo com essas instruções.

   Em programação protected-mode, o valor pelo qual fazer o shift é truncado para 5 bits antes da instrução executar (Para x86), pois 31 bits é o maior valor útil pelo qual fazer um
   shift.

*** Setting a known value into the Carry Flag
    É importante lembrar que instruções anteriores podem deixar valores na =CF=, de forma que esses valores serão rotacionados para o operando de uma instrução =RCL= ou =RCR=. Se uma
    outra instrução deixa um bit 1 na =CF= e uma instrução =RCR= ou =RCL= é executada, esse bit 1 entrará no operando destino dessas instruções.

    Se ao realizar uma operação de rotação desse tipo é importante saber o valor da =CF=, existe um par de instruções x86 que farão isso por você: =CLC= e =STC=. =CLC= faz o clear da
    CF, isto é, zera ela. =STC= faz o set da CF, isto é, seu valor passa a ser 1. Essas instruções não recebem operandos.

** Bit-Bashing in Action
   Como já vimos, o Linux possuem um método bastante conveniente para exibir texto na tela. O problema é que ele só exibe /texto/ - se você quiser exibir um valor numérico de um
   registrador como um par de dígitos hexadecimais, isso não ajudará. Primeiro, é necessário converter o valor numérico em sua representação em string, e depois exibir essa representação
   usando o serviço de kernel =sys_write= via =INT 80h=.

** Flags, Tests, and Branches

*** Conditional jumps
    Quando executado, um /jump/ condicional testa algo - geralmente uma, ocasionalmente duas, ou, mais raramente, três das /flags/ no registrador =EFlags=.

*** Comparisons with CMP
    A instrução =CMP= faz o /set/ de flags para tarefas de comparação.

    =cmp <op1>,<op2>    ; Sets OF, SF, ZF, AF, PF, e CF=

*** A Jungle of Jump Instructions
    Existe um grande número de mnemônicos para instruções /jump/, mas aqueles que lidam com relações aritméticas podem ser considerados em seis categorias: =Equal=, =Not equal=, =Greater than=,
    =Less than=, =Greater than or equal to=, e =Less than or equal to=. Complicações podem surgir do fato de que existem /dois/ mnemônicos para cada instrução de máquina - por exemplo, =JLE=
    (/Jump if Less than or Equal to/) e =JNG= (/Jump if Not Greater than/) são sinônimos, de forma que o /assembler/ gera opcodes binários idênticos para esses dois mnemônicos. Os sinônimos são
    apenas uma conveniência para o programador.

    Outra complicação é que existem conjuntos de instruções separados para comparações aritméticas em operandos com sinal e sem sinal.

*** "Greater Than" versus "Above"
    Para diferenciar /signed jumps/ de /unsigned jumps/, os mnemônicos usam duas expressões distintas para a relação entre dois valores:

    * *Valores com sinal* são vistos como sendo *maiores que* ou *menores que*. Por exemplo,
      para testar se um operando com sinal é maior que outro, usaríamos o mnemônico =JG=
      (Jump if Greater) depois de uma instrução =CMP=.
    * *Valores sem sinal* são vistos como estando /acima/ ou /abaixo/. Por exemplo, para dizer
      se um operando sem sinal é maior que (/acima/) outro, usaríamos o mnemônico =JA=
      (Jump if Above) depois de uma instrução =CMP=.

    A tabela a seguir resume os mnemônicos aritméticos de jump e seus sinônimos.

    | Mnemônico                           | Sinônimo                                 |
    |-------------------------------------+------------------------------------------|
    | JA (Jump if Above)                  | JNBE (Jump if Not Below or Equal)        |
    | JAE (Jump if Above or Equal)        | JNB (Jump if Not Below)                  |
    | JB (Jump if Below)                  | JNAE (Jump if Not Above or Equal)        |
    | JBE (Jump if Below or Equal)        | JNA (Jump if Not Above)                  |
    | JE (Jump if Equal)                  | JZ (Jump if result is Zero)              |
    | JNE (Jump if Not Equal)             | JNZ (Jump if result is Not Zero)         |
    | JG (Jump if Greater than)           | JNLE (Jump if Not Less than or Equal)    |
    | JGE (Jump if Greater than or Equal) | JNL (Jump if Not Less than)              |
    | JL (Jump if Less than)              | JNGE (Jump if Not Greater than or Equal) |
    | JLE (Jump if Less than or Equal)    | JNG (Jump if Not Greater than)           |

    A tabela a seguir mostra os mnemônicos relacionados a comparações aritméticas organizados por condições lógicas e de acordo com seu uso com valores com sinal ou com valores sem sinal. Também
    são listadas as /flags/ cujos valores são testados por cada instrução de /jump/.

    | Condição                     | Unsigned | Jump quando      | Signed | Jump quando        |
    |------------------------------+----------+------------------+--------+--------------------|
    | Equal                        | JE       | ZF = 1           | JE     | ZF = 1             |
    | Not Equal                    | JNE      | ZF = 0           | JNE    | ZF = 0             |
    | Greater than                 | JA       | CF = 0 E ZF = 0  | JG     | ZF = 0 OU SF = OF  |
    | Not Less than or Equal to    | JNBE     | CF = 0 E ZF = 0  | JNLE   | ZF = 0 OU SF = OF  |
    | Less than                    | JB       | CF = 1           | JL     | SF != OF           |
    | Not Greater than or Equal to | JNAE     | CF = 1           | JNGE   | SF != OF           |
    | Greater than or Equal to     | JAE      | CF = 0           | JGE    | SF = OF            |
    | Not less than                | JNB      | CF = 0           | JNL    | SF = OF            |
    | Less than or Equal to        | JBE      | CF = 1 OU ZF = 1 | JLE    | ZF = 1 OU SF != OF |
    | Not Greater than             | JNA      | CF = 1 OU ZF = 1 | JNG    | ZF = 1 OU SF != OF |


*** Looking for 1-Bits with TEST
    A instrução =TEST= realiza uma operação lógica =AND= entre dois operandos, e depois faz o set das flags como a instrução =AND= faria, sem alterar o operando destino.

    =test <operand>,<bit mask>=

    O operando /bit mask/ deve conter um bit 1 em cada posição onde um bit 1 deve ser buscado no primeiro operando, e bits 0 em todos os outros bits.

    Por exemplo, se quisermos determinar se o bit 3 de =AX= está em /set/, usaríamos:

    =test ax,08h       ; Bit 3 -> 00001000B=

    O operando destino =AX= não é modificado como o resultado da operação, mas a tabela verdade AND é checada entre =AX= e o padrão binário 00001000. Se o bit 3 em =AX= é
    um bit 1, então a flag ZF é atribuída para 0. Se o bit 3 em =AX= é um bit 0, então ZF é atribuída para 1. Por quê? Se você fizer o =AND= de 1 (na máscara de bits) com
    0 (em =AX=), você obtém 0. E se todas as oito operações /bitwise/ AND terminarem em 0, o resultado é 0, e ZF é setada para 1, indicando que o resultado é 0.

    =TEST= está para um =AND= assim como =CMP= está para um =SUB=.

    Dois fatores que são importantes de se ter em mente: =TEST= somente é útil para encontrar bits 1; =TEST= não pode testar com confiança por dois ou mais bits 1 no operando
    de uma só vez, ele só checa pela presença de um único bit 1.

*** Looking for 0-Bits with BT
    A partir dos processadores 386, foi introduzida uma nova instrução que pode testar por ambos bits 0 ou bits 1. =BT= (Bit Test) copia o bit especificado do primeiro
    operando para para a Carry Flag (CF).

    =bt <value containing bit>,<bit number>=

    Por exemplo:

    #+BEGIN_SRC <ASM>
    bt eax,4       ; Test bit 4 of AX
    jnc quit       ; Done if bit 4 = 0 (CF = 0)
    #+END_SRC

    Note que, contrário a =TEST=, com =BT= você não está criando uma /máscara de bits/. Com o segundo operando de =BT= você especifica o número orinal de um bit (contando a partir
    de 0).

    Note que a instrução =BT= é bastante lenta, então pode ser significativo usar alguma outra opção mais rápida dentro de laços que são repetidos uma quantidade enorme de vezes,
    por exemplo.

** Protected Mode Memory Addressing in Detail
   /Protected mode/ na CPU 386 introduziu um esquema de endereçamento de memória de propósito geral no qual todos os registradores de propósito geral podem participar igualmente.

   O endereçamento de memória em /protected mode/ é esquematizado a seguir.

   #+BEGIN_SRC <ASM>
                [ BASE   +   (INDEX  x  SCALE)   +   DISPLAC. ]
                   |            |         |            |
                   v            v         v            v
                Qualquer    Qualquer    1,2,4,ou 8   Qualquer constante
              registrador  registrador  (1 não faz    de 32 bits
              de propósito     de        nada)
              geral         propósito
                              geral
                           |------------------|
                         A escala é aplicada ao índice antes
                         que as adições sejam feitas.
    #+END_SRC

    As regras desse endereçamento de memória são:

    * Os registradores =base= e =index= podem ser qualquer um dos registradores de propósito
      geral, incluindo =ESP=.
    * O =displacement= pode ser qualquer constante de 32 bits.
    * A =scale= deve ser um dos valores 1, 2, 4, ou 8.
    * O registrador =index= é multiplicado por =scale= antes que as adições sejam realizadas.
    * Todos os elementos são opcionais e podem ser utilizados em qualquer combinação.
    * Registradores de 16 bits e 8 bits não podem ser usados para endereçamento de memória.

    Na tabela a seguir, temos exemplos de diferentes combinações para endereçamento de memória.

    | Esquema                               | Exemplo                | Descrição                                                |
    |---------------------------------------+------------------------+----------------------------------------------------------|
    | [BASE]                                | [edx]                  | Somente base                                             |
    | [DISPLACEMENT]                        | [0F3h] ou [<variável>] | Displacement, ou constante literal ou endereço simbólico |
    | [BASE + DISPLACEMENT]                 | [ecx + 033h]           | Base mais displacement                                   |
    | [BASE + INDEX]                        | [eax + ecx]            | Base mais index                                          |
    | [INDEX x SCALE]                       | [ebx * 4]              | Index vezes scale                                        |
    | [INDEX x SCALE + DISPLACEMENT]        | [eax * 8 + 65]         | Index vezes scale mais displacement                      |
    | [BASE + INDEX x SCALE]                | [esp + edi * 2]        | Base mais index vezes scale                              |
    | [BASE + INDEX x SCALE + DISPLACEMENT] | [esi + ebp * 4 + 9]    | Base mais index vezes scale mais displacement            |


** Effective Address Calculations
   A tabela anterior resume os métodos de expressar um endereço de memória em protected mode de 32 bits. Todos com exceção dos dois primeiros envolvem algum tipo de aritmética dentro
   dos colchetes. Essa aritmética é chamada de *effective address calculation*, e o resultado do cálculo é o *effective address*.

   O endereço efetivo no esquema =[BASE]= é simplesmente a quantidade de 32 bits armazenada no registrador de propósito geral dentro dos colchetes. Nenhum cálculo está envolvido, mas
   o que você vê no código fonte não é um literal ou um endereço simbólico. Então, apesar de a instrução ser codificada com um nome de um registrador em colchetes, o endereço que será
   enviado para o sistema de memória quando o código for executado está armazenado dentro do registrador.

   O único caso onde o endereço efetivo está logo ali na linha com o mnemônico da instrução é no caso de um endereço literal dentro dos colchetes. Mas isso é raramente usado.

*** Lembrete
    Considere:

    #+BEGIN_SRC <ASM>
    mov eax,HexStr         ; Isso copia o endereço (numérico) de HexStr para EAX
    mov bl,byte [HexStr]  ; Isso copia o primeiro byte do conteúdo no endereço de HesStr para BL
    #+END_SRC

*** Index x Scale + Displacement Addressing
    Podemos definir um array contendo valores de 32 bits da seguinte forma:

    =Sums: dd "15,12,6,0,21,14,4,0,0,19"=

    Notando que endereçamento de memória é realizado byte a byte, para obtermos o segundo elemento desse array, pro exemplo, usaríamos o conceito de =scale=. Por exemplo, considere que
    o registrador =ECX=, funcionando aqui como um =index=, contém o valor 1. Então, a instrução

    =mov eax,[Sums+ecx*4]=

    copia o valor 12 para o registrador =EAX=.

    A abordagem de escala para elementos de tamanhos diferentes de 1, 2, 4, ou 8, pode ser mais eficiente se usarmos uma look up table para a escala. Por exemplo, suponha que você possua
    um array com elementos de tamanho 25 bytes cada. Você pode definir uma tabela com múltiplos de 25:

    =ScaleValues: dd 0,25,50,75,100,125,150,175,200,225,250,275,300=

    Para obter a escala de um índice com valor 6, você obteria o produto de 6 x 25 na tabela:

    #+BEGIN_SRC <ASM>
    mov ecx,6
    mov eax,[ScaleValues+ecx*4]
    #+END_SRC

    O valor em =EAX= agora contém o endereço efetivo do primeiro byte do elemento 6 para o array com elementos de tamanho 25 bytes.

** LEA: The Top-Secret Math Machine
   Na superfície, o que a instrução =LEA= (Load Effective Address) faz é simples, ela calcula um /endereço efetivo/ dado entre os colchetes de seu operando fonte, e carrega esse endereço em
   um registrador de propósito geral de 32 bits dado como seu operando destino.

   Por exemplo, na instrução =MOV= vista acima, que busca por um elemento de índice 6 na tabela =ScaleValues=, ela primeiro deve calcular o endereço efetivo do item no índice 6. Esse endereço
   então é usado para acessar a memória.

   Mas e se quiséssemos salvar esse endereço em um registrador para usarmos depois? É isso que a instrução =LEA= faz.

   #+BEGIN_SRC <ASM>
   mov ecx,6
   lea ebx,[ScaleValues+ecx*4]
   #+END_SRC

   O que acontece nessa última instrução é que a CPU calcula o endereço efetivo dado dentro dos colchetes, e carrega esse endereço para o registrador =EBX=. Tenha em mente que as entradas individuais
   de uma tabela (ou array) não possuem /labels/ e, portanto, não podem ser referenciados diretamente. =LEA= permite que você calcule um endereço efetivo de qualquer elemento em uma tabela e carregue
   esse endereço em um registrador.

   =LEA= possui ainda um outro propósito: realizar cálculos eficientes sem shifts, adds ou =MUL=. Por exemplo, o cálculo que multiplica o valor em =EDX= por três usando dois shifts e um =ADD=,

   #+BEGIN_SRC <ASM>
   mov edx,ecx
   shl edx,1
   add edx,ecx
   #+END_SRC

   Podemos realizar o mesmo cálculo com o seguinte:

   #+BEGIN_SRC <ASM>
   mov edx,ecx          ; Copy character counter to EDX
   lea edx,[edx*2+edx]  ; EDX x 3
   #+END_SRC

   Uma coisa importante é que =LEA= não referencia o endereço que calcula. Ela simplesmente realiza o cálculo dentro dos colchetes e o carrega no operando destino. A memória não é tocada, e as /flags/
   não são afetadas.

   Claro, os cálculos usando =LEA= são limitados pelas regras do endereçamento de memória no que pode ir dentro dos colchetes, mas você pode multiplicar qualquer registrador de propósito geral pelos valores
   2, 3, 4, 5, 8, e 9, que seriam, respectivamente:

   #+BEGIN_SRC <ASM>
   lea eax,[eax*2]              ; EAX x 2
   lea ebx,[ebx*2+ebx]          ; EBX x 3
   lea ecx,[ecx*4]              ; ECX x 4
   lea edx,[edx*4+edx]          ; EDX x 5
   lea esi,[esi*8]              ; ESI x 8
   lea ebp,[ebp*8+ebp]          ; EBP x 9
   #+END_SRC

   Mas para obter outros valores é possível usar combinações. Por exemplo, para multiplicar =EAX= por 10, podemos fazer:

   #+BEGIN_SRC <ASM>
   lea eax,[eax*4+eax]
   lea eax,[eax*2]
   #+END_SRC

** The Burden of 16-bit Registers
   Existe um pequeno ponto negativo da mudança de /protected mode/ para registradores de 32 bits. O uso dos registradores de propósito geral de 16 bits =AX=, =BX=, =CX=, =DX=, =SP=, =BP=, =SI=, e =DI= torna
   o código mais lento. Desde que os registradores de 32 bits são regra, usar os registradores de 16 bits é considerado um caso especial que aumenta o tamanho dos /opcodes/ que o assembler gera, fazendo com
   que o código acabe sendo mais lento.

   Claro, em algumas circunstâncias é absolutamente necessário o uso de registradores de 16 bits e até de 8 bits. Por exemplo, ao escrever valores de 8 ou 16 bits na memória. NASM não permite que você escreva:

   =mov byte [ebx],eax        ; NASM não permite isso=

   Para escrever um valor isolado de 8 bits na memória, você precisa colocar o valor em um dos registradores de 8 bits, digamos =AL=, e fazer:

   =mov byte [ebx],al=

** Character Table Translation

*** Translating with MOV or XLAT
    A instrução =XLAT= é /hard-corded/ para usar certos registradores de certas formas. Os seus dois operandos são implícitos:

    * O endereço da /tabela de tradução/ deve estar em =EBX=.
    * O caractere a ser traduzido deve estar em =AL=.
    * O caractere traduzido será retornado em =AL=, substituindo o caractere que lá estava originalmente.

    Em /protected mode/ de 32 bits, o mesmo resultado pode ser alcançado com:

    =mov al,byte [UpCase+eax]=

    Com o detalhe de que quaisquer outros valores nos 24 bits mais significantes de =EAX= devem ser zerados. A instrução =XLAT= usa somente os 8 bits de =AL=.
