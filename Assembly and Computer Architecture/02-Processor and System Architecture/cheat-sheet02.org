* Capítulo 2 - Processor and System Architecture

** Cache and Registers
   Os *registradores* apresentados a seguir podem ser agrupados em quatro categorias distintas: propósito geral,
   segmento, /flags/, e /instruction pointer/. Os registradores de  segmento  em  arquiteturas 64-bit continuam
   presentes, porém somente o sistema operacional possui acesso a eles (*Protected mode flat model*).

   |                  | 64-bit | 32-bit | 16-bit |
   |------------------+--------+--------+--------|
   | Registradores de | RAX    | EAX    | AX     |
   | propósito geral  | RBX    | EBX    | BX     |
   |                  | RCX    | ECX    | CX     |
   |                  | RDX    | EDX    | DX     |
   |                  | RSI    | ESI    | SI     |
   |                  | RDI    | EDI    | DI     |
   |                  | RBP    | EBP    | BP     |
   |                  | RSP    | ESP    | SP     |
   |                  | R8-R15 |        |        |
   |------------------+--------+--------+--------|
   | Registradores de | N/A    | CS     | CS     |
   | segmento         |        | DS     | DS     |
   |                  |        | ES     | ES     |
   |                  |        | SS     | SS     |
   |                  |        | FS     |        |
   |                  |        | GS     |        |
   |------------------+--------+--------+--------|
   | Instruction      | RIP    | EIP    | IP     |
   | Pointer          |        |        |        |
   |------------------+--------+--------+--------|
   | Flags            | RFLAGS | EFLAGS | FLAGS  |


   Apesar de podermos usar todos os registradores de propósito geral em nossos programas, alguns deles notadamente
   possuem propósitos especiais. A seguir são listados alguns dos usos especiais dos registradores 32- e 64-bits:
   
   * =rax/eax= é comumente usado como o registrador padrão de acumulação. Operações como multiplicação automaticamente
     colocarão parte do resultado em rax/eax. Chamadas de funções usam rax/eax para o valor de retorno. Não use rax/eax
     para armazenamento de dados ao realizar essas operações.
   * =rcx/ecx= é usado para manter o contador de laço para laços em execução. Portanto, evite usar rcx/ecx para armazenar
     dados dentro de laços.
   * =rbp/ebp= é usado como o ponteiro /frame/ para /stack frames/. Esse registrador é usado para referenciar dados na
     pilha de execução.
   * =rsp/esp=, o registrador /stack pointer/, também é usado para gerenciamento da pilha e tipicamente aponta para o topo
     da /stack frame/ atualmente ativa.
   * =rsi/esi= e =rdi/edi= são registradores de índices usados com operações em /strings/ como STOSB, MOVSB, e SCASB para
     armazenar, carregar, e escanear grandes quantidades de dados. Tais operações essencialmente colocam a CPU em um modo
     de laço automático que é mais eficiente do que um laço escrito pelo programador.
   * =rip/eip= é o registrador /instruction pointer/ estendido. Esse registrador é usado para apontar para o endereço de
     memória contendo a próxima instrução a ser buscada, decodificada, e executada em um programa e é ajustado automaticamente.
     *NÃO MODIFIQUE ESSE REGISTRADOR MANUALMENTE*
   * =rflags/eflags= é o registrador de controle e status. Instruções especiais como LAHF e SAHF podem ser usadas para carregar
     e armazenar as flags da CPU de e para o registrador =ah=. Não modifique rflags/eflags diretamente.


   CPU /flags/ são bits individuais que ou controlam operações da CPU de alguma forma ou refletem o status das operações da CPU.
   As oito flags listadas a seguir são usualmente visíveis em alguns ambientes de desenvolvimento.

   | Flag      | Símbolo | Bit | Descrição                                                                                               |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Carry     | CF      |   0 | "Setado" como um resultado de /carry/ ou /borrow/ do bit mais significante. Por exemplo, quando         |
   |           |         |     | o resultado de uma operação é muito grande para o destino.                                              |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Parity    | PF      |   2 | "Setado" se o número de bits setados (1s) no resultado é par. Usado em operações de correção de         |
   |           |         |     | erros.                                                                                                  |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Auxiliary | AF      |   4 | Usado primariamente para aritmética /binary-coded decimal/ (BCD). A flag indica quando /carry/          |
   | carry or  |         |     | ou /borrow/ ocorre no menor /nibble/ (4 bits menos significantes)                                       |
   | adjust    |         |     |                                                                                                         |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Zero      | ZF      |   6 | "Setado" se o resultado da operação é zero.                                                             |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Sign      | SF      |   7 | "Setado" se o resultado de uma operação é negativo.                                                     |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Interrupt | IF      |   9 | Permite que o processador lide com interrupções de hardware mascaráveis, também conhecidos como         |
   |           |         |     | /interrupt requests/ (IRQ).                                                                             |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Direction | DF      |  10 | Quando /clear/ (0), /strings/ são processadas da esquerda para a direita incrementando os registradores |
   |           |         |     | de índice das strings =rsi/esi= e =rdi/edi= depois de cada operação de string. Quando "setado", as      |
   |           |         |     | strings são processadas da direita para a esquerda e os registradores são decrementados depois de cada  |
   |           |         |     | operação de string.                                                                                     |
   |-----------+---------+-----+---------------------------------------------------------------------------------------------------------|
   | Overflow  | OF      |  11 | "Setado" se um resultado de /complemento a dois/ não caberá no número de bits usados para a operação.   |
   |           |         |     | Diferente da flag Carry, a flag Overflow serve para inteiros com sinal e seria "setada" quando o sinal  |
   |           |         |     | do resultado é diferente do sinal do operando.                                                          |


*** Endereçamento em processadores 64-bit
    Enquanto a natureza de 64-bits de um processador x86-64 significa que dados e endereços podem ser armazenados com 64 bits, os processadores
    x86-64 atuais utilizam somente os 48 bits menos significantes para endereçamento.
